@PACKAGE_INIT@

include(CMakeFindDependencyMacro)

# Check for required C++ standard
if(NOT CMAKE_CXX_STANDARD)
    set(CMAKE_CXX_STANDARD 17)
endif()

if(CMAKE_CXX_STANDARD LESS 17)
    set(CMAKE_CXX_STANDARD 17)
    message(STATUS "http_parse requires C++17, setting CMAKE_CXX_STANDARD to 17")
endif()

# Feature checks
include(CheckCXXSourceCompiles)

# Check for C++20 features
set(CMAKE_REQUIRED_FLAGS "-std=c++20")
check_cxx_source_compiles("
    #include <concepts>
    #include <span>
    template<typename T>
    concept integral = std::is_integral_v<T>;
    int main() { return 0; }
" HTTP_PARSE_HAS_CXX20_FEATURES)

# Check for C++23 features
set(CMAKE_REQUIRED_FLAGS "-std=c++23")
check_cxx_source_compiles("
    #include <expected>
    #include <ranges>
    int main() { 
        std::expected<int, int> e{42};
        return 0; 
    }
" HTTP_PARSE_HAS_CXX23_FEATURES)

# Include the targets file
include("${CMAKE_CURRENT_LIST_DIR}/http_parse-targets.cmake")

# Set up imported target
if(NOT TARGET co::http_parse)
    message(FATAL_ERROR "Expected target co::http_parse not found")
endif()

# Provide feature information
set(http_parse_CXX20_SUPPORT ${HTTP_PARSE_HAS_CXX20_FEATURES})
set(http_parse_CXX23_SUPPORT ${HTTP_PARSE_HAS_CXX23_FEATURES})

# Helper function for users
function(target_enable_http_parse_cxx23 target)
    if(HTTP_PARSE_HAS_CXX23_FEATURES)
        target_compile_features(${target} PRIVATE cxx_std_23)
        target_compile_definitions(${target} PRIVATE HTTP_PARSE_HAS_CXX23=1)
        message(STATUS "Enabled C++23 features for target ${target}")
    else()
        message(WARNING "C++23 features not available for target ${target}")
    endif()
endfunction()

check_required_components(http_parse)